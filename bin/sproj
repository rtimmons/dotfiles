#!/bin/bash

#
# I have a confession:
# 
# I still use subversion, and github doesn't know all my secrets. I
# know. It's like admitting to having a meth problem or admitting
# that you believe in Newt Gingrich. The fact is that subversion is
# *not* distributed; it's an easy back-up mechanism. Moreover it's
# easy to create "sub-projects" within one repository and then only
# check out those sub-projects. I know it's possible to do the former
# in git with remotes and that there's little value in doing the
# latter with git, but I like having all my little one-off projects
# versioned together in one place. And also: I totally did it with
# git's mom last night, so I'm still way cooler than git.
# 
# This script makes it (slightly) easier to work with a personal
# subversion repository. I facilitates creating new "projects" and
# interacting with them.
# 
# It's kind of ugly but it does what I want it to (and it does a few
# things that I don't want it to).
# 

# TODO: `sproj new` doesn't work because I haven't copied over the
#       skeleton files.  See instances of "RYPROFILE" and cry.

if [ -z "$SPROJ_BASE" ]; then
    SPROJ_BASE="svn+ssh://rtimmons.desktop.amazon.com/home/rtimmons/svn/projects"
fi


#
# TODO:  Make sproj acknowledge office "zip" files such as
#        xlsx. E.g., instead of checking in .xlsx, it
#        unzips and checks in the raw XML. This will help
#        to track actual diffs.
#


# TODO: make URLs in 'move' and other commands respect ..
#
# #!/usr/bin/env perl -w
#
# use strict;
# use warnings;
#
# my $str = do { local $/ = ''; <> } || '';
#
# my $rel_path_rx =
#     qr{ ([^/]*?)/       # not a slash * followed by /
#         \.\.    /       # literal .. followed by /
#         ([^/]*?)/?      # not slash * followed by optional ?
#     }x;
#
# while($str =~ s/$rel_path_rx/$2/) {
#     # nop
# };
#
#
# print $str;


sproj() {
    local command=$1
    shift

    case "$command" in
      info)
        command=info
        ;;
      ls*)
        command=ls
        ;;
      new*)
        command=new
        ;;
      ci|commit|autocommit)
        command=autocommit
        ;;
      co*)
        command=checkout
        ;;
      all)
        command=all
        ;;
      arch*)
        command=archive
        ;;
      unarch*)
        command=unarchive
        ;;
      r|root*)
        command=root
        ;;
      rm)
        command=rm
        ;;
      mv)
        command=mv
        ;;
      st*)
        command=status
        ;;
      rename|name)
        command=rename
        ;;
      up*)
        command=update
        ;;
      *)
        command=help
        ;;
    esac

    "sproj_$command" "$@"
    return $?
}

scm() {
    echo svn "$@"

    if [ -z "$_SPROJ_DEBUG" ]; then
        svn "$@"
        if [ ! $? ]; then
            exit $?
        fi
    fi
}

sproj_info() {
    echo "sproj remote base url: $SPROJ_BASE"
    return
}

sproj_root() {
    if [ ! -d "$PWD/.svn" ]; then
        echo "$SPROJ_BASE"
        return
    fi

    local root=$(scm info | grep '^Repository Root: ' \
                          | sed 's/^Repository Root: \(.*\)/\1/')
    echo "$root"
}

sproj_url() {
    if [ ! -d "$PWD/.svn" ]; then
        exit 1
    fi

    local root=$(scm info | grep '^URL: ' \
                          | sed 's/^URL: \(.*\)/\1/')

    echo "$root"
}

sproj_help() {
    echo "sproj: Manage SVN Projects Support materials"
    echo ""
    echo "Environment variables:"
    echo ""
    echo "    SPROJ_BASE      Set the repository root directory. This can be"
    echo "                    a subpath with a repository. This directory"
    echo "                    should already have two children: 'Active' and"
    echo "                    'Archive'. New projects will be created within"
    echo "                    the 'Active' directory; archiving will move"
    echo "                    them to the 'Archive' directory, and"
    echo "                    unarchiving will move them back."
    echo ""
    echo ""
    #
    # TODO: provide list of commands via 'reflection':
    #
    #     cat "$0" | grep '^sproj_.*\(\)' \
    #              | sed 's/^sproj_\(.*\)().*/\1/g' \
    #
    exit 0
}

sproj_checkout() {
    local proj="$1"
    if [ -z "$proj" ]; then
        echo "Need project to checkout"
        exit 1
    fi

    scm co "$SPROJ_BASE/Active/$proj" "$proj"
}

sproj__parse_part() {
    local part="$1"

    if [ -z "$part" ]; then
        part="Active"
    fi

    case "$part" in
      ac*|Ac*)
        part=Active
        ;;
      ar*|Ar*)
        part=Archive
        ;;
      *)
        echo "Unknown project subdir '$part'"
        exit 1
        ;;
    esac

    echo "$part"
}

sproj_status() {
    for D in *; do
        if [ ! -d "$D" ]; then
            continue
        fi

        pushd "$D" &>/dev/null
        if [ -d ".svn" ]; then
            st=$(svn status)
            if [ ! -z "$st" ]; then
                echo "$D : "
                svn status
            fi
        else
            echo "Unversioned: $D"
        fi
        popd &>/dev/null
    done
}

sproj_update() {
    # Not really a "pipe", but let's think of it as one
    local status_pipe="$RYPROFILE_BASE/var/sproj.$$.pipe"
    touch "$status_pipe"
    trap "rm -f \"$status_pipe\"" EXIT

    for D in $(ls | sort); do
        if [ ! -d "$D" ]; then
            continue
        fi

        pushd "$D" &>/dev/null
        if [ -d ".svn" ]; then
            (echo -n "$D : "; scm update ) 1>> "$status_pipe" &
        else
            echo "Unversioned: $D" >> "$status_pipe"
        fi
        popd &>/dev/null
    done
    cat < "$status_pipe" >/dev/null
    rm "$status_pipe"
}

scm_act_on_base() {
    local action="$1"
    shift
    local part=$(sproj__parse_part "$1")

    scm "$action" "$SPROJ_BASE/$part"
}

sproj_all() {
    scm_act_on_base co "$1"
}

sproj_ls() {
    scm_act_on_base ls "$1"
}

sproj_archive() {
    local proj="$1"
    if [ -z "$proj" ]; then
        echo "Need project to archive"
        exit 1
    fi

    scm mv "$SPROJ_BASE/Active/$proj" \
           "$SPROJ_BASE/Archive/$proj" \
           -m "sproj: archiving project '$proj'"

   if [ $? ]; then
       scm update
   fi
}

sproj_unarchive() {
    local proj="$1"
    if [ -z "$proj" ]; then
        echo "Need project to unarchive"
        exit 1
    fi

    scm mv "$SPROJ_BASE/Archive/$proj" \
           "$SPROJ_BASE/Active/$proj" \
           -m "sproj: unarchiving project '$proj'"
}

sproj_rm() {
    local f="$@"
    if [ -z "$f" ]; then
        echo "need file/dir to remove"
        exit 1
    fi

    local url=$(sproj_url)

    scm rm "$url/$@" -m "sproj: rm $@"

    if [ $? ]; then
        scm update
    fi
}

sproj_mv() {
    local old="$1"
    local new="$2"

    if [[ -z "$old" || -z "$new" ]]; then
        echo "Need old name & new name"
        exit 1
    fi

    local url=$(sproj_url)

    scm mv "$url/$1" "$url/$2" -m "sproj: move '$old' to '$new'"

    if [ $? ]; then
        scm update
    fi
}

sproj_rename() {
    local part=$(sproj__parse_part "$1")
    local old="$2"
    local new="$3"


    if [[ -z "$part" || -z "$old" || -z "$new" ]]; then
        echo "Need partition & old name & new name"
        exit 1
    fi

    scm mv "$SPROJ_BASE/$part/$old" \
           "$SPROJ_BASE/$part/$new" \
           -m "sproj: moving '$part/$old' -> '$part/$new'"
}

_guid_elts=( \
    0 1 2 3 4 5 6 7 8 9 A B C D E F G H J K M N P Q R S T U W X Y Z \
)

_guid_char() {
    local nelts=${#_guid_elts[@]}
    local ix=$(expr $RANDOM % $nelts)
    echo ${_guid_elts[$ix]}
}

_guid() {
    local out=""
    local char=""

    for (( i=0; i<20; i++ )); do
        char=$(_guid_char)
        out="$out$char"
    done

    echo $out
}

sproj_recursive_commit() {
    if [ -d ".svn" ]; then
        sproj_autocommit "$@"
        return
    fi

    for D in *; do
        if [ ! -d "$D" ]; then
            continue;
        fi
        pushd "$D" &>/dev/null

        sproj_autocommit "$@"

        popd &>/dev/null
    done
}

sproj_autocommit() {
    local msg="$1"
    shift

    if [ "-r" = "$msg" ]; then
        sproj_recursive_commit "$@"
        return
    fi

    [ -z "$msg" ] && msg="autocommit"

    if [ ! -d ".svn" ]; then
        echo "Need to be inside project dir"
        exit 1
    fi

    # Delete removed files
    #
    #  Must be done before 'update' since that
    #  will restore any files deleted without
    #  doing an `svn rm`.
    #
    # Have to use 'svn' directly rather than the
    # cute 'scm' wrapper since we need to pipe
    svn stat \
        | grep '^!' \
        | perl -p -e 's/^!\s+(.*)$/"$1"/g' \
        | xargs -I '%' svn rm '%@'

    scm update

    # Add all new files
    svn stat \
        | grep '^\?' \
        | perl -p -e 's/^\?\s+(.*)$/"$1"/g' \
        | xargs -I '%' svn add '%@'

    local st=$(svn stat)
    if [ ! -z "$st" ]; then
        scm commit -m "sproj: commit [$msg]"
    fi
}


sproj_new() {
    local proj="$1"
    if [ -z "$proj" ]; then
        echo "Need project to create"
        exit 1
    fi

    scm mkdir "$SPROJ_BASE/Active/$proj" \
              -m "sproj: make new project '$proj'"

    sproj co "$proj"

    local guid=$(_guid)

    # Create project index file which
    # assigns a GUID to each project
    # for cross-referencing
    pushd "$proj" &>/dev/null
    {
        echo "$proj  "
        echo "$guid"
    } > Index.txt
    scm add Index.txt

    # Create Makefile to open project in TextMate
    {
        echo ".PHONY: open"
        echo "open: "
        echo "	open -a TextMate ."
    } > Makefile
    scm add Makefile

    local tmproj=$(tmproj_template "$guid" "$proj")
    cp "$tmproj" "./.tm_properties"
    scm add "./.tm_properties"

    mkdir Worklogs
    scm add Worklogs

    mkdir exclude
    scm propset svn:ignore exclude .

    scm ci -m "sproj: project skeleton"

    popd &>/dev/null
}

tmproj_template() {
    local guid="$1"
    shift
    local proj="$@"

    local tmpfile="/tmp/tmproj-$$.tmp"
    cat "$RYPROFILE_BASE/var/tm_properties.template" \
        |   sed "s/__PROJECT__/$proj/g" > "$tmpfile"

    echo "$tmpfile"
}


###################

sproj "$@"

